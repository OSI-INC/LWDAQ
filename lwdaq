#!/bin/bash

# LWDAQ Launch Program for Unix, Linux, and Darwin.
# Copyright (C) 2004-2021 Kevan Hashemi, Brandeis University
#
# This shell program launches LWDAQ from a terminal on Linux, Unix, or
# MacOS. On Windows, you can run the shell from Cygwin directly. On
# MinGW you can run the shell only after you insert an empty line in
# front of the hash-bang at the top of the script. The shell program
# accepts options --no-gui, --gui, --no-console, or --pipe, as described
# in the LWDAQ manual. After the option (if any), you can pass a TCL script
# that will be executed by LWDAQ after it starts up. This script is the 
# configuration script. Its full path name will be available in the global
# variable LWDAQ_Info(configuration_file). If you specify a configuration 
# script you can pass parameters into it by adding them to your command line.
# These parameters will be placed in the global variable LWDAQ_Info(argv). 
# The first argument after the configuration script will be element zero
# in the list. The following line, for example, calls tclsh in the background 
# and runs the tcl script config.tcl, passing two parameters into 
# LWDAQ_Info(argv), data.txt and 34.56.
#
# ./lwdaq --no-console config.tcl data.txt 34.56
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
# USA
#

# Determine the location of the LWDAQ directory. We assume that this
# script is in the LWDAQ directory.
LWDAQ_DIR=`dirname $0`

# Determine the architecture. We support only 64-bit.
ARCH=x86_64

# Determine operating system. Default is Unix. 
OS=UNIX
if [ "`uname -a | grep -i Darwin`" != "" ]
then 
	OS=MacOS
fi
if [ "`uname -a | grep -i Windows`" != "" ]
then 
	OS=Windows
fi
if [ "`uname -a | grep -i Linux`" != "" ]
then 
	OS=Linux
fi

# Print operating system and architecture.
echo "OS: $OS"
echo "ARCH: $ARCH"

# Determine the option and configuration script name. We look
# for the "--" string at the start of the first parameter, and
# if we find it, we use this as our option. Otherwise we create
# the option "--gui". We shift the positional parameters to the
# left so as to remove the option and configuration file, leaving
# only additional positional parameters, should they exist. We
# will pass these additional parameters to tclsh or wish later.
if [ `expr "$1" : "--"` -eq 2 ] 
then
	OPTION=$1
	CONFIG_FILE=$2
	shift 2
else
	OPTION="--gui"
	CONFIG_FILE=$1
	shift 1
fi
echo "OPTION: $OPTION"

# Check to see if we should run in no-gui mode with
# tclsh or with gui in wish.
OPTION_FOUND=0
if [ "$OPTION" == "--pipe" ] 
then 
	GUI_ENABLED=0
	RUN_IN_BACKGROUND=0
	OPTION_FOUND=1
fi
if [ "$OPTION" == "--no-console" ] 
then 
	GUI_ENABLED=0
	RUN_IN_BACKGROUND=1
	OPTION_FOUND=1
fi
if [ "$OPTION" == "--no-gui" ] 
then 
	GUI_ENABLED=0
	RUN_IN_BACKGROUND=0
	OPTION_FOUND=1
fi
if [ "$OPTION" == "--gui" ] 
then 
	GUI_ENABLED=1
	if [ "$OS" == "Linux" ]
	then
		RUN_IN_BACKGROUND=0
	else
		RUN_IN_BACKGROUND=1
	fi
	OPTION_FOUND=1
fi
if [ "$OPTION" == "--child" ] 
then 
	GUI_ENABLED=1
	RUN_IN_BACKGROUND=1
	OPTION_FOUND=1
fi

# If the option wass not found, we issue a warning and set the three
# flags that need to be set.
if [ $OPTION_FOUND == 0 ]
then
	echo "WARNING: Unrecognised option '$OPTION', defaulting to --no-gui."
	GUI_ENABLED=0
	RUN_IN_BACKGROUND=0
fi

# Report the process options.
echo "GUI_ENABLED: $GUI_ENABLED"
echo "RUN_IN_BACKGROUND: $RUN_IN_BACKGROUND"

# Report local directory in which relative file names will be resolved.
echo "LOCAL_DIR: `pwd`"

# Check the configuration file.
if [ "$CONFIG_FILE" != "" ]
then 
	if [ -f $CONFIG_FILE ]
	then
		echo "CONFIG_FILE: $CONFIG_FILE"
	else
		echo "ERROR: Configuration file '$CONFIG_FILE' does not exist."
		exit
	fi
else
	if [ "$OPTION" == "--no-console" ]
	then
		echo "ERROR: No configuration file specified with no-console option."
		exit
	else
		echo "CONFIG_FILE: None"
	fi
fi

# Pick the TclTk shell based upon the options, operating system
# and architecture.
if [ $OS == UNIX ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL=wish
	else
		SHELL=tclsh
	fi
fi
if [ $OS == Linux ]
then
	LD_LIBRARY_PATH="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/lib"
	export LD_LIBRARY_PATH
	if [ $GUI_ENABLED == 1 ] 
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/bin/wish8.6"
	else
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/bin/tclsh8.6"
	fi
fi
if [ $OS == MacOS ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/MacOS/Wish"
	else
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/MacOS/tclsh"
	fi
fi
if [ $OS == Windows ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Windows/bin/wish86.exe"
	else
		PATH="$PATH:$LWDAQ_DIR/LWDAQ.app/Contents/Windows/bin/"
		export PATH
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Windows/bin/tclsh86.exe"
	fi
fi

# Let the user know which shell we selected.
echo "SHELL: $SHELL"

# Set the initialization script name.
INIT_FILE="$LWDAQ_DIR/LWDAQ.app/Contents/LWDAQ/Init.tcl"

# Launch the shell and pass to it the start-up script and any additional
# parameters we may have passed to this bash script.
if [ $RUN_IN_BACKGROUND == 1 ]
then
	$SHELL $INIT_FILE $OPTION $CONFIG_FILE "$@" &
else
	$SHELL $INIT_FILE $OPTION $CONFIG_FILE "$@"
fi
