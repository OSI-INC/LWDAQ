<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]
				LWDAQ_print -nonewline $t "[format %.2f $separation] "
			} {
				LWDAQ_print -nonewline $t "0.00 "
			}
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m [expr [lindex $table $m] + $separation]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} else {
			LWDAQ_print -nonewline $t "XX"
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m [expr [lindex $table $m] + $separation]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} else {
			LWDAQ_print -nonewline $t "XX "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m [expr [lindex $table $m] + $separation]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} else {
			LWDAQ_print -nonewline $t "XX "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m [expr [lindex $table $m] + $separation]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} else {
			LWDAQ_print -nonewline $t "XX "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format $.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elsif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elsif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print -nonewline $t "Ave "
for {set k 0} {$k < [llength $table]} {incr k} {
	lset table $m 2 [format %.2f [expr 1.0*[lindex $table $m 2]/$output_time]]
	LWDAQ_print -nonewline $t "[lindex $table $m 2] "
}
LWDAQ_print $t

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print -nonewline $t "Ave "
for {set k 0} {$k < [llength $table]} {incr k} {
	lset table $k 2 [format %.2f [expr 1.0*[lindex $table $k 2]/$output_time]]
	LWDAQ_print -nonewline $t "[lindex $table $m 2] "
}
LWDAQ_print $t

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print -nonewline $t "Ave "
for {set k 0} {$k < [llength $table]} {incr k} {
	lset table $k 2 [format %.2f [expr 1.0*[lindex $table $k 2]/$output_time]]
	LWDAQ_print -nonewline $t "[lindex $table $k 2] "
}
LWDAQ_print $t

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

<script>
# Script 6
# Read in tracker output files generated by the exporter, but modified to have
# the tracker sample rate in the first line, apply a recursive filter to x and
# y positions independently, and record in arrays with the output sample rate.
# Now that we have the positions with time, calculate separations of all possible
# pairs of transmitters. Print a summary table at the end showing average
# separations.
set time_constant 5
set output_rate 1.0
set channel_list [list]
set output_period [expr 1.0/$output_rate]

set fnl [LWDAQ_get_file_name 1]

foreach fn $fnl {
	set f [open $fn r]
	set contents [split [string trim [read $f]] \n]
	close $f

	if {[regexp {T[0-9]{10}_([0-9]+)\.txt} [file tail $fn] match channel_num]} {
		LWDAQ_print $t "Channel Number: $channel_num"
		set sample_rate [lindex $contents 0]
		LWDAQ_print $t "Sample Rate: $sample_rate"
	} {
		LWDAQ_print $t "ERROR: No channel number in file name [file tail $fn]."
		continue
	}  

	lappend channel_list $channel_num
	set output_$channel_num [list]

	LWDAQ_print $t "Going through [file tail $fn]..."

	set b_0 [expr 1.0/$sample_rate/$time_constant]
	set a_1 [expr 1.0 - $b_0]
	LWDAQ_print $t "Recursive constants\
		a_1 = [format %.4f $a_1],\
		b_0 = [format %.4f $b_0]."

	set output_time "0.00"
	set output_x "0.00"
	set output_y "0.00"
	lappend output_$channel_num "$output_x $output_y"

	for {set i 2} {$i < [llength $contents]} {incr i} {
		set input_time [expr 1.0 * ($i - 1) / $sample_rate]
		set output_x [expr $output_x * $a_1 + [lindex $contents $i 0] * $b_0]
		set output_y [expr $output_y * $a_1 + [lindex $contents $i 1] * $b_0]
		if {$input_time - $output_time >= $output_period} {
			set output_time [expr $output_time + $output_period]
			lappend output_$channel_num "[format %.2f $output_x] [format %.2f $output_y]"
		}
		LWDAQ_support
	}	
	LWDAQ_print $t "Reached time [format %.2f $output_time]."
}
LWDAQ_print -nonewline $t "Time "
set table [list]
for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
	for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
		LWDAQ_print -nonewline $t "[lindex $channel_list $k]\_[lindex $channel_list $j] "
		lappend table "$k $j 0.0"
	}
}
LWDAQ_print $t
set i 0
set done 0
while {!$done} {
	set output_time [expr 1.0 * $i / $output_rate]
	LWDAQ_print -nonewline $t "[format %.2f $output_time] "
	set done 1
	set m 0
	for {set k 0} {$k < [llength $channel_list] - 1} {incr k} {
		for {set j [expr $k + 1]} {$j < [llength $channel_list]} {incr j} {
			set ck [lindex $channel_list $k]
			set cj [lindex $channel_list $j]
			if {($i < [llength [set output_$ck]]) \
					&& ($i < [llength [set output_$cj]])} {
				set done 0
				set pk [lindex [set output_$ck] $i]
				set pj [lindex [set output_$cj] $i]
				set xk [lindex $pk 0]
				set yk [lindex $pk 1]
				set xj [lindex $pj 0]
				set yj [lindex $pj 1]
				set separation [format %.1f \
					[expr sqrt(($xk-$xj)*($xk-$xj)+($yk-$yj)*($yk-$yj))]]
				LWDAQ_print -nonewline $t "$separation "
				lset table $m 2 [format %.1f [expr [lindex $table $m 2] + $separation]]
			} else {
				LWDAQ_print -nonewline $t "0.00 "
			}
			incr m
		}
	}	
	LWDAQ_print $t
	LWDAQ_support
	incr i
}

LWDAQ_print -nonewline $t "Ave "
for {set k 0} {$k < [llength $table]} {incr k} {
	lset table $k 2 [format %.2f [expr 1.0*[lindex $table $k 2]/$output_time]]
	LWDAQ_print -nonewline $t "[lindex $table $k 2] "
}
LWDAQ_print $t

LWDAQ_print $t "\nSeparation Table" green
LWDAQ_print -nonewline $t "Ch "
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
}
LWDAQ_print $t
for {set k 0} {$k < [llength $channel_list]} {incr k} {
	LWDAQ_print -nonewline $t "[lindex $channel_list $k] "
	for {set j 0} {$j < [llength $channel_list]} {incr j} {
		if {$j == $k} {
			LWDAQ_print -nonewline $t "0.0 "
		} elseif {$j > $k} {
			set index [lsearch $table "$k $j *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		} else {
			set index [lsearch $table "$j $k *"]
			set value [lindex $table $index 2]
			LWDAQ_print -nonewline $t "$value "
		}
	}
	LWDAQ_print $t
}
</script>

